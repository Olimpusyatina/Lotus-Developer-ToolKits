'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare

'use this library if you don't need the ability to convert the JSONArray to a JSON string.
'use the ls.snapps.JSONWrapperConverters library if you do need to convert a JSONArray to a JSON string.


'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Class JSONArray

'++LotusScript Development Environment:2:5:(Declarations):0:10
%REM
Copyright 2007, 2008, 2009, 2010 SNAPPS (Strategic Net Applications, Inc.)

Licensed under the Apache License, Version 2.0 (the "License"); 
you may not use this file except in compliance with the License. 
You may obtain a copy of the License at 

	http://www.apache.org/licenses/LICENSE-2.0 

Unless required by applicable law or agreed to in writing, software 
distributed under the License is distributed on an "AS IS" BASIS, 
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. 
See the License for the specific language governing permissions and limitations under the License.
%END REM

Class JSONArray
	'*********************************************************************************************
	'* Version:		1.0.6
	'* Purpose:		This class is a wrapper for an array in a JSON string
	'*
	'* Properties:	Count:		The number items
	'*						Items:		Returns all items in the JSONArray
	'*
	'* Methods:		AddItem(Value):	
	'*							Adds the value to the JSONArray
	'*						RemoveItem(Index)
	'*							Removes the value of the specified array index
	'*						ReplaceItemValue(Index, Value)
	'*							Replaces the value in the specified array index
	'*
	'* Author:		Troy Reimer (treimer@snapps.com)
	'*********************************************************************************************
	Private m_vData As Variant	
	Private m_iCount As Integer
	Private m_sThreadList List As String
	Private m_sErrorMessage As String
	Private m_iErrorCount As Integer
	
	Property Get Count As Integer
		Count = Me.m_iCount
	End Property	
	Property Get Items As Variant
		If Isobject(Me.m_vData) Then
			Set Items = Me.m_vData
		Else
			Items = Me.m_vData
		End If		
	End Property	
	
	Public Sub AddItem(p_vValue As Variant)
		On Error Goto ErrorHandler
		Me.m_iCount = Me.m_iCount + 1
		If Isarray(Me.m_vData) Then
			Me.m_vData = Arrayappend(Me.m_vData, p_vValue)
		Else
			Redim Me.m_vData(0)
			If Isobject(p_vValue) Then
				Set Me.m_vData(0) = p_vValue
			Else
				Me.m_vData(0) = p_vValue
			End If
		End If
Done:
		Exit Sub
ErrorHandler:
		Call Me.RaiseError(Error)
	End Sub
	
	Public Sub RemoveItem(p_iIndex As Integer)
		Dim vNewData As Variant
		Dim iIndex As Integer
		On Error Goto ErrorHandler
		If Isarray(Me.m_vData) Then
			If p_iIndex <= Ubound(Me.m_vData)  And p_iIndex > -1 Then
				iIndex = -1
				Forall i In Me.m_vData
					iIndex = iIndex + 1
					If iIndex <> p_iIndex Then
						If Isarray(vNewData) Then
							vNewData = Arrayappend(vNewData, i)
						Else
							Redim vNewData(0)
							If Isobject(i) Then
								Set vNewData(0) = i
							Else
								vNewData(0) = i
							End If
						End If
					End If
				End Forall
				
				Me.m_vData = vNewData
				If Isarray(Me.m_vData) Then
					Me.m_iCount = Ubound(Me.m_vData) + 1
				Else
					Me.m_iCount = 0
				End If				
			End If
		End If
Done:
		Exit Sub
ErrorHandler:
		Call Me.RaiseError(Error)
	End Sub
	
	Public Sub ReplaceItemValue(p_iIndex As Integer, p_vValue As Variant)
		On Error Goto ErrorHandler
		If Isarray(Me.m_vData) Then
			If Ubound(Me.m_vData) <= p_iIndex Then
				If Isobject(p_vValue) Then
					Set Me.m_vData(p_iIndex) = p_vValue
				Else
					Me.m_vData(p_iIndex) = p_vValue
				End If				
			End If
		End If
Done:
		Exit Sub
ErrorHandler:
		Call Me.RaiseError(Error)
	End Sub
	
	Private Sub RaiseError(p_sMsg As String)
		Dim sErrorMsg As String
		Dim x As Integer
		On Error Goto 0
		
		Me.m_iErrorCount = Me.m_iErrorCount + 1
		Me.m_sThreadList(Me.m_iErrorCount) = "<" & Getthreadinfo(10) & ": line " & Erl & ">" 
		If Me.m_sErrorMessage = "" Then
			Me.m_sErrorMessage = "ERROR: " & Err & ": " & p_sMsg & "."
		End If
		
		For x = Me.m_iErrorCount To 1 Step -1
			sErrorMsg = sErrorMsg & Me.m_sThreadList(x)
		Next
		sErrorMsg = "<CLASS:" & Typename(Me) & ">" & sErrorMsg & " " & Me.m_sErrorMessage
		Error Err, sErrorMsg
	End Sub
End Class