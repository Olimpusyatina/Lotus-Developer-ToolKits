'++LotusScript Development Environment:2:5:(Options):0:74
Option Public
Option Declare
Use "ArrayTools"

'++LotusScript Development Environment:2:5:(Forward):0:1
Declare Public Class Window
Declare Public Class LNProgressBar
Declare Public Class PopupMenu
Declare Sub Initialize

'++LotusScript Development Environment:2:5:(Declarations):0:10
Private Const libName = {(WindowsLib)}
Private nLine As string

Const VK_F9 = &H78
Const KEYEVENTF_KEYDOWN = &H0
Const KEYEVENTF_KEYUP = &H2

Private Type Point
	x As Long
	y As Long
End Type

Private Type Rect
	x1 As Long
	y1 As Long
	x2 As Long
	y2 As Long
	
'	Left As Long
'	Top As Long
'	Right As Long
'	Bottom As Long
End Type

Type MSG
	hwnd As Long
	message As Long
	wParam As Long
	lParam As Long
	sTime As Long
	pt As Point
End Type

Type FILETIME
	dwLowDateTime As Long
	dwHighDateTime As Long
End Type

Declare Private Function GetVersion Lib "kernel32.dll" Alias "GetVersion" () As Long
Declare Private Function URLDownloadToFile Lib "urlmon.dll" Alias "URLDownloadToFile" (ByVal pCaller As Long, ByVal szURL As String, ByVal szFileName As String, ByVal dwReserved As Long, ByVal lpfnCB As Long) As Long
Declare Private Function NEMPutFile Lib "nnotesws.dll" Alias "NEMPutFile" (wHandle As Long, ByVal szFileName As String, ByVal szFilter As String, ByVal szTitle As String ) As Long
Declare Private Function NEMGetFile Lib "nnotesws.dll" Alias "NEMGetFile" ( wHandle As Long, ByVal szFileName As String, ByVal szFilter As String, ByVal szTitle As String ) As Long

Declare Private Function ShellExecute Lib "shell32.dll" Alias "ShellExecute" (ByVal hwnd As Long, ByVal lpszOp As String, ByVal lpszFile As String, ByVal lpszParams As String, ByVal LpszDir As String, ByVal FsShowCmd As Long) As Long
 
 
Declare Sub keybd_event Lib "user32.dll" (ByVal bVk As Integer, ByVal bScan As Integer, ByVal dwflags As Long, ByVal dwextrainfo As Long)
'keybd_event VK_F9, 0 , KEYEVENTF_KEYDOWN , 0
'keybd_event VK_F9, 0 , KEYEVENTF_KEYUP , 0
 
Declare Private Sub SetWindowPos Lib "user32.dll" Alias "SetWindowPos" (ByVal hWnd As Long, ByVal hWndInsertAfter As Long, ByVal X As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal wFlags As Long)
Declare Private Function GetActiveWindow Lib "user32.dll" Alias "GetActiveWindow" () As Long
Declare Private Function GetForegroundWindow Lib "user32.dll" Alias "GetForegroundWindow" () As Long
Declare Private Function FindWindow Lib "user32.dll" Alias "FindWindow" (ByVal lpClassName As String, ByVal lpWindowName As String) As Long
Declare Private Sub SetWindowText Lib "user32.dll" Alias "SetWindowText" (ByVal hWnd As Long, ByVal lpString As String)
Declare Private Function GetWindowText Lib "user32.dll" Alias "GetWindowText" (ByVal hWnd As Long, ByVal lpString As String, ByVal chMax As Long) As Long
Declare Private Function GetTopWindow Lib "user32.dll" Alias "GetTopWindow" () As Long
Declare Private Function GetFocus Lib "user32.dll" Alias "GetFocus" () As Long
Declare Private Function SetFocus Lib "user32.dll" Alias "SetFocus" (ByVal hWnd As Long) As Long
Declare Private Function IsWindowVisible Lib "user32.dll" Alias "IsWindowVisible" (ByVal hWnd As Long) As Long
Declare Private Function GetWindow Lib "user32.dll" Alias "GetWindow" (ByVal hWnd As Long, ByVal wCmd As Long) As Long
Declare Private Function SetForegroundWindow Lib "user32.dll" Alias "SetForegroundWindow" (ByVal hWnd As Long) As Long
Declare Private Function PostMessage Lib "user32.dll" Alias "PostMessageA" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Declare Private Function GetMessage Lib "user32.dll" Alias "GetMessageA" (wMsg As MSG, ByVal hwnd As Long, ByVal wParam As Long, ByVal lParam As Long) As Long
Declare Private Function SendMessage Lib "user32.dll" Alias "SendMessage" (ByVal hwnd As Long, ByVal wMsg As Long, ByVal wParam As Long, lparam As Long) As Long
Declare Private Sub PostQuitMessage Lib "user32.dll" Alias "PostQuitMessage" (ByVal wCmd As Long)
Declare Private Function GetCursorPos Lib "user32.dll" Alias "GetCursorPos" (lpPoint As Point) As Long
Declare Private Function GetWindowRect Lib "user32.dll" Alias "GetWindowRect" (ByVal hwnd As Long, r As Rect) As Long
Declare Private Function GetWindowInfo Lib "user32.dll" Alias "GetWindowInfo" (ByVal hwnd As Long, hinf As Variant) As Long
Declare Private Function GetClientRect Lib "user32.dll" Alias "GetClientRect" (ByVal hwnd As Long, r As Rect) As Long
Declare Private Function GetTempPath Lib "kernel32.dll" Alias "GetTempPathA" (ByVal nBufferLength As Long, ByVal lpBuffer As String) As Long
Declare Private Function SetCursorPos Lib "user32.dll" Alias "SetCursorPos" (lpPoint As Point) As Long
Declare Private Function GetCapture Lib "user32.dll" Alias "GetCapture" () As Long
Declare Private Function ReleaseCapture Lib "user32.dll" Alias "ReleaseCapture" () As Long
Declare Private Function SetCapture Lib "user32.dll" Alias "SetCapture" (ByVal hwnd As Long) As Long
Declare Private Function GetAsyncKeyState Lib "user32.dll" Alias "GetAsyncKeyState" (ByVal vKey As Long) As Long
Declare Private Function WindowFromPoint Lib "user32.dll" Alias "WindowFromPoint" (lpPoint As Point) As Long
Declare Private Function ChildWindowFromPoint Lib "user32.dll" Alias "ChildWindowFromPoint" (ByVal hwndParent As Long, lpPoint As Point) As Long
Declare Private Function GetDesktopWindow Lib "user32.dll" Alias "GetDesktopWindow" () As Long
Declare Private Function GetParent Lib "user32.dll" Alias "GetParentWindow" (ByVal hwnd As Long) As Long
Declare Private Function SetWindowLong Lib "user32" Alias "SetWindowLong" (ByVal hwnd As Long, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
Declare Private Function GetWindowLong Lib "user32" Alias "GetWindowLong" (ByVal hwnd As Long, ByVal nIndex As Long) As Long
Declare Private Function GetDC Lib "user32" Alias "GetDC" (ByVal hwnd As Long) As Long
Declare Private Function GetPixel Lib "gdi32" Alias "GetPixel" (ByVal hDC As Long, lpPoint As Point) As Long
Declare Private Function GetLastError Lib "kernel32" Alias "GetLastError" () As String
Declare Private Function IsZoomed Lib "kernel32" Alias "IsZoomed" (ByVal hwnd As Long) As Long
Declare Private Sub Memcpy Lib "msvcrt" Alias "Memcpy" ( D As Any, ByVal P As Long, ByVal N As Long)
Declare Private Function GetCurrentNotesWindow Lib "nnotesws" Alias "GetCurrentNotesWindow" () As Long
Declare Private Function NEMStopSubprogrammWindow Lib "nnotesws" Alias "NEMStopSubprogrammWindow" () As Long

Declare Private Function NEMProgressBegin Lib "nnotesws.dll" Alias "NEMProgressBeginA" ( ByVal wFlags As Integer ) As Long
Declare Private Sub NEMProgressDeltaPos Lib "nnotesws.dll" Alias "NEMProgressDeltaPosA" ( ByVal hwnd As Long, ByVal dwIncrement As Long )
Declare Private Sub NEMProgressEnd Lib "nnotesws.dll" Alias "NEMProgressEndA" ( ByVal hwnd As Long )
Declare Private Sub NEMProgressSetBarPos Lib "nnotesws.dll" Alias "NEMProgressSetBarPosA" ( ByVal hwnd As Long, ByVal dwPos As Long)
Declare Private Sub NEMProgressSetBarRange Lib "nnotesws.dll" Alias "NEMProgressSetBarRangeA" ( ByVal hwnd As Long, ByVal dwMax As Long )
Declare Private Sub NEMProgressSetText Lib "nnotesws.dll" Alias "NEMProgressSetTextA" ( ByVal hwnd As Long, ByVal pcszLine1 As String, ByVal pcszLine2 As String )
Declare Private Function NEMEnableWaitCursor Lib "nnotesws.dll" Alias "NEMEnableWaitCursor" () As Long
Declare Private Function NEMDisableWaitCursor Lib "nnotesws.dll" Alias "NEMDisableWaitCursor" () As Long

Declare Private Function GetSystemMenu Lib "user32.dll" Alias "GetSystemMenu" (ByVal hWnd As Long, ByVal bRevert As Long) As Long
Declare Private Function CreatePopupMenu Lib "user32.dll" Alias "CreatePopupMenu" () As Long
Declare Private Function DestroyMenu Lib "user32.dll" Alias "DestroyMenu" (ByVal hMenu As Long) As Long
Declare Private Function GetMenuItemCount Lib "user32.dll" Alias "GetMenuItemCount" (ByVal hMenu As Long) As Long
Declare Private Function SetMenu Lib "user32.dll" ( ByVal hWnd As Long, ByVal hMenu As Long ) As Long
Declare Private Function GetMenu Lib "user32.dll" Alias "GetMenu" (ByVal hWnd As Long) As Long
Declare Private Function AppendMenu Lib "user32.dll" Alias "AppendMenuA" (ByVal hMenu As Long, ByVal wFlags As Long, ByVal wIDNewItem As Long, ByVal lpNewItem As Any) As Long
Declare Private Function GetMenuString Lib "user32.dll" Alias "GetMenuStringW" (ByVal hMenu As Long, ByVal wIDItem As Long, ByVal lpString As string, ByVal nMaxCount As Long, ByVal wFlag As Long) As Long
Declare Private Function TrackPopupMenu Lib "user32.dll" Alias "TrackPopupMenu" (ByVal hMenu As Long, ByVal wFlags As Long, ByVal x As Long, ByVal y As Long, ByVal nReserved As Long, ByVal hwnd As Long, lprc As Rect) As Long
Declare Private Function DrawMenuBar Lib "user32.dll" Alias "DrawMenuBar" (ByVal hwnd As Long) As Long
Declare Private Function EnableMenuItem Lib "user32.dll" Alias "EnableMenuItem" (ByVal hMenu As Long, ByVal wIDEnableItem As Long, ByVal wIDEnable As Long) As Long
Declare Private Function CheckMenuItem Lib "user32.dll" Alias "CheckMenuItem" (ByVal hMenu As Long, ByVal wIDCheckItem As Long, ByVal wIDCheck As Long) As String
Declare Private Function DeleteMenu Lib "user32.dll" Alias "DeleteMenu" (ByVal hMenu As Long, ByVal nPos As Long, ByVal wFlags As Long) As Long
Declare Private Function InsertMenu Lib "user32.dll" Alias "InsertMenuA" (ByVal hMenu As Long, ByVal nPos As Long, ByVal wFlags As Long, ByVal wIDNewItem As Long, ByVal lpNewItem As Any) As Long
Declare Private Function InsertMenuItem Lib "user32.dll" Alias "InsertMenuItem" (ByVal hMenu As Long, ByVal nPos As Long, ByVal wIDNewItem As Long, ByVal lpNewItem As Any) As Long
Declare Private Function GetMenuItemID Lib "user32.dll" Alias "GetMenuItemID" (ByVal hMenu As Long, ByVal nPos As Long) As Long
Declare Private Function GetSubMenu Lib "user32.dll" Alias "GetSubMenu" (ByVal hMenu As Long, ByVal nPos As Long) As Long
Declare Private Function HiliteMenuItem Lib "user32.dll" Alias "HiliteMenuItem" (ByVal hWnd As Long, ByVal hMenu As Long, ByVal uItemHilite As Long, ByVal uHilite As Long) As Long
Declare Private Function SetMenuDefaultItem Lib "user32.dll" Alias "SetMenuDefaultItem" (ByVal hMenu As Long, ByVal uItem As Long, ByVal fByPos As Long) As Long
Declare Private Function CheckMenuRadioItem Lib "user32.dll" Alias "CheckMenuRadioItem" (ByVal hMenu As Long, ByVal idFirst As Long, ByVal idLast As Long, ByVal idCheck As Long, ByVal wFlags As Long) As Long
Declare Private Function GetMenuItemRect Lib "user32.dll" Alias "GetMenuItemRect" (ByVal hWnd As Long, ByVal hMenu As Long, ByVal uItem As Long, lprcItem As Rect) As Long
Declare private Function MenuItemFromPoint Lib "user32.dll" Alias "MenuItemFromPoint" (ByVal hWnd As Long, ByVal hMenu As Long, lprc As Rect) As long

' Реестр 
Declare Function RegOpenKey Lib "advapi32.dll" Alias "RegOpenKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long) As Long
Declare Function RegOpenKeyEx Lib "advapi32.dll" Alias "RegOpenKeyExA" (ByVal hKey As Long, ByVal lpSubKey As String, ByVal ulOptions As Long, ByVal samDesired As Long, phkResult As Long) As Long
Declare Function RegCloseKey Lib "advapi32.dll" (ByVal hKey As Long) As Long
Declare Function RegQueryValueEx Lib "advapi32.dll" Alias "RegQueryValueExA" (ByVal hkey As Long, ByVal lpValueName As String, ByVal lpReserved As Long, lpType As Long, ByVal lpData As String, lpcbData As Long) As Long
Declare Function RegEnumKey Lib "advapi32.dll" Alias "RegEnumKeyA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpname As String, ByVal cbName As Long) As Long
Declare Function RegEnumKeyEx Lib "advapi32.dll" Alias "RegEnumKeyExA" (ByVal hKey As Long, ByVal dwIndex As Long, ByVal lpname As String, lpcbName As Long, ByVal lpReserved As Long, ByVal lpClass As String, lpcbClass As Long, lpftLastWriteTime As FILETIME) As Long
Declare Function RegSetValueEx& Lib "advapi32.dll" Alias "RegSetValueExA" (ByVal hKey As Long, ByVal lpValueName As String, ByVal Reserved As Long, ByVal dwType As Long, ByVal lpData As String, ByVal cbData As Long)
Declare Function RegCreateKey& Lib "advapi32.dll" Alias "RegCreateKeyA" (ByVal hKey As Long, ByVal lpSubKey As String, phkResult As Long)

Private Const NPB_TWOLINE = 3
Private Const NPB_ONELINE = 2
Private Const NPB_STATUSBAR = 32

'-- Constant Definitions for WIN32API
Const HKEY_CLASSES_ROOT = &H80000000
Const HKEY_CURRENT_USER = &H80000001
Const HKEY_LOCAL_MACHINE = &H80000002
Const HKEY_USERS = &H80000003
Const HKEY_PERFORMANCE_DATA = &H80000004
Const SYNCHRONIZE = &H100000
Const STANDARD_RIGHTS_READ = &H20000
Const STANDARD_RIGHTS_WRITE = &H20000
Const STANDARD_RIGHTS_EXECUTE = &H20000
Const STANDARD_RIGHTS_REQUIRED = &HF0000
Const STANDARD_RIGHTS_ALL = &H1F0000
Const KEY_QUERY_VALUE = &H1
Const KEY_SET_VALUE = &H2
Const KEY_CREATE_SUB_KEY = &H4
Const KEY_ENUMERATE_SUB_KEYS = &H8
Const KEY_NOTIFY = &H10
Const KEY_CREATE_LINK = &H20
Const KEY_READ = ((STANDARD_RIGHTS_READ Or KEY_QUERY_VALUE Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY) And (Not SYNCHRONIZE))
Const KEY_WRITE = ((STANDARD_RIGHTS_WRITE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY) And (Not SYNCHRONIZE))
Const KEY_EXECUTE = (KEY_READ)
Const KEY_ALL_ACCESS = ((STANDARD_RIGHTS_ALL Or KEY_QUERY_VALUE Or KEY_SET_VALUE Or KEY_CREATE_SUB_KEY Or KEY_ENUMERATE_SUB_KEYS Or KEY_NOTIFY Or KEY_CREATE_LINK) And (Not SYNCHRONIZE))
Const ERROR_SUCCESS = 0&

' Reg Data Types...
Const REG_NONE = 0 ' No value type
Const REG_SZ = 1 ' Unicode nul terminated string
Const REG_EXPAND_SZ = 2 ' Unicode nul terminated string
Const REG_BINARY = 3 ' Free form binary
Const REG_DWORD = 4 ' 32-bit number
Const REG_DWORD_LITTLE_ENDIAN = 4 ' 32-bit number (same as REG_DWORD)
Const REG_DWORD_BIG_ENDIAN = 5 ' 32-bit number
Const REG_LINK = 6 ' Symbolic Link (unicode)
Const REG_MULTI_SZ = 7 ' Multiple Unicode strings

Public Class Window
	Private p As Point
	Private r As Rect
	Private bar As LNProgressBar
	Private tmp As String
	
	Public Function getTempDir() As String
		On Error Goto handler
		Const FuncName = {Function "Window.getTempDir" }
		Dim errStr As String
		
		Dim res As Long
		Dim buf As String
		
		If Me.tmp = "" Then
			buf = Space$(256)
			res = GetTempPath(256, buf)
			getTempDir = Left$(buf, res)
			If FullTrim(getTempDir) <> "" Then Me.tmp = getTempDir
		Else
			getTempDir = Me.tmp
		End If
		
		Goto endh
handler:
		errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		Error Err,  errStr 
endh:
	End Function

	Public Sub initializeCursor
		On Error Goto handler
		Const FuncName = {Function "Window.initializeCursor" }
		Dim errStr As String

		Call GetCursorPos(Me.p)
		
		Goto endh
handler:
		errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		Error Err, errStr
endh:
	End Sub
	
	Public Function getCursorPositionX() As Long
		On Error Goto handler
		Const FuncName = {Function "Window.getCursorPositionX" }
		Dim errStr As String

		getCursorPositionX = Me.p.x
		
		Goto endh
handler:
		errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		Error Err, errStr
endh:
	End Function
	
	Public Function getCursorPositionY() As Long
		On Error Goto handler
		Const FuncName = {Function "Window.getCursorPositionY" }
		Dim errStr As String

		getCursorPositionY = Me.p.y
		
		Goto endh
handler:
		errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		Error Err, errStr
endh:
	End Function

	Public Sub setCursorPosition(xTmp As Long, yTmp As Long)
		Me.p.x = xTmp
		Me.p.y = yTmp
	End Sub
End Class
Public Class LNProgressBar
	Private hWnd As Long
	Private pos As Long
	Private rang As Long
	
	Public Sub New(barType As Integer)
		On Error Goto handler
		Const FuncName = {sub "LNProgressBar.New" }
		Dim errStr As string
		
		Select Case barType
			Case 1:
				Me.hWnd = NEMProgressBegin(NPB_ONELINE)
			Case 2:
				Me.hWnd = NEMProgressBegin(NPB_TWOLINE)
			Case Else:
				Me.hWnd = NEMProgressBegin(NPB_STATUSBAR)
		End Select
		Goto endh
handler:
		errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		Error Err, errStr
endh:
	End Sub
	
	Public Sub setText(txt1 As String, txt2 As String)
		NEMProgressSetText Me.hWnd, txt1, txt2
	End Sub
	
	Property Set Position As Long
		If Position > 0 Then
			If Position > Me.rang Then
				Me.pos = Me.rang
			Else
				Me.pos = Position
			End If
		End If
		NEMProgressSetBarPos Me.hWnd, Me.pos
	End Property
	
	Property Set Range As Long
		If Range >= 0 Then
			Me.rang = Range
			NEMProgressSetBarRange Me.hWnd, Me.rang
		End If
	End Property
	
	Property Get Position As Long
		Position = Me.pos
	End Property
	
	Property Get Range As Long
		Range = Me.rang
	End Property
	
	Sub toPosition(dpos As Long)
		Me.pos = Me.pos + dpos
		NEMProgressDeltaPos Me.hWnd, dpos
	End Sub
	
	Public Sub Delete()
		NEMProgressEnd Me.hWnd
	End Sub
End Class
Public Class PopupMenu
	Private MenuArr As Variant
	Private SubMenuArr As Variant
	Private subMenu As PopupMenu
	Private count As Long
	Private hMenu As Long
	Private hWnd As Long
	Private p As Point
	Private r As Rect
	Private anim As Long
	Private selected As Long
	Private menuID As Long
	Private ConstmenuID As Long
	
	Public Sub New
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.New" }
		Dim errStr As string
		
		Dim activeHWnd As Long
		
		Call GetCursorPos(Me.p)
		activeHWnd = WindowFromPoint(Me.p)
		Me.r.x1 = Me.p.x
		Me.r.y1 = Me.p.y
		Call GetWindowRect(activeHWnd, Me.r)
		Me.hWnd = GetFocus'GetActiveWindow
		Me.hMenu = CreatePopupMenu
		Me.p.x = -1
		Me.p.y = -1
		Me.menuID = -1
		me.ConstmenuID = 217748300 
		Me.anim = 0
		Set Me.subMenu = nothing
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub
	
	Public Property Get GetMenu As Variant
		GetMenu = me.MenuArr
	End property
	
	Public Function getItem(pos As Variant) As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.getItem" }
		Dim errStr As String
		
		getItem = ""
		If Me.hMenu = 0 Then Goto endh
		getItem = me.MenuArr(pos-1)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Public sub appendItem(itemName As Variant)
		On Error Goto handler
		Const FuncName = {sub "PopupMenu.appendItem" }
		Dim errStr As String
		
		
		If Me.hMenu = 0 Then Goto endh
		Me.menuID = Me.menuID + 1
		Me.count = Me.count + 1
		
		Call AppendMenu(Me.hMenu, 0, Me.menuID, "" & itemName)
		
		If IsArray(Me.MenuArr) then
			Me.MenuArr = ArrayAppendElement(Me.MenuArr,itemName)
		Else
			Me.MenuArr = ArrayInit(itemName)
		End if
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub appendItemArray(itemNames As Variant)
		On Error Goto handler
		Const FuncName = {sub "PopupMenu.appendItemArray" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		ForAll x In itemNames
			Call Me.appendItem(x)
		End ForAll
				
		Goto endh
handler:
		errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		Error Err, errStr
endh:
	End Sub

	Public Function itemCount() As Long
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.itemCount" }
		Dim errStr As String
		
		itemCount = -1
		
		If Me.hMenu = 0 Then Goto endh
		
		itemCount = GetMenuItemCount(Me.hMenu)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Public sub insertItem(itemName As variant, pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.insertItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Me.menuID = Me.menuID + 1
		Me.count = Me.count + 1
		Call InsertMenu(Me.hMenu, CLng(pos - 1), 1024, Me.menuID, "" & itemName)
		Me.MenuArr=ArrayAppendElement(Me.MenuArr,itemName)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub appendSubMenu(menu As Variant, itemName As Variant)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.appendSubMenu" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Dim h As Long
		h = menu.Handle
		If h = 0 Then Goto endh
		Set me.subMenu = menu
		Call AppendMenu(Me.hMenu, 16, h, "" & itemName)
		If IsArray(itemName) Then
			Call menu.appendItemArray(itemName)
		Else
			Call menu.appendItem(itemName)
		End If
				
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub insertSubMenu(menu As Variant, itemName As Variant, pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.insertSubMenu" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Dim h As Long
		h = menu.Handle
		If h = 0 Then Goto endh
		Call InsertMenu(Me.hMenu, pos - 1, 1040, h, "" & itemName)
		Set me.subMenu = menu
		If IsArray(itemName) Then
			Call menu.appendItemArray(itemName)
		Else
			Call menu.appendItem(itemName)
		End If
				
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub appendSeparator()
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.appendSeparator" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		Call AppendMenu(Me.hMenu, 2048, 0, "")
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub insertSeparator(pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.insertSeparator" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Call InsertMenu(Me.hMenu, pos - 1,3072, 0, "")
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub deleteItem(pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.deleteItem" }
		Dim errStr As String
		
		Dim menu As Variant
		
		If Me.hMenu = 0 Then Goto endh
		
		Call DeleteMenu(Me.hMenu, pos - 1, 1024)
		me.MenuArr = ArrayRemovePosition(me.MenuArr,pos)
		me.count = me.count - 1
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public sub appendBreak(itemName As Variant)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.appendBreak" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		Me.menuID = Me.menuID - 1
		Call AppendMenu(Me.hMenu, 64, Me.menuID, "" & itemName)
		me.MenuArr = ArrayAppendElement(me.MenuArr,itemName)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub insertBreak(itemName As Variant, pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.insertBreak" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Me.menuID = Me.menuID - 1
		Call InsertMenu(Me.hMenu, CLng(pos - 1), 1088, Me.menuID, itemName)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub appendBarBreak(itemName As Variant)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.appendBarBreak" }
		Dim errStr As String

		If Me.hMenu = 0 Then Goto endh
		Me.menuID = Me.menuID - 1
		Call AppendMenu(Me.hMenu, 32, Me.menuID, "" & itemName)
				
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub insertBarBreak(itemName As Variant, pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.insertBarBreak" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Me.menuID = Me.menuID - 1
		Call InsertMenu(Me.hMenu, CLng(pos - 1), 1056, Me.menuID, itemName)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub enableItem(pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.enableItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Call EnableMenuItem(Me.hMenu, pos - 1, 1024)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub disableItem(pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.disableItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Call EnableMenuItem(Me.hMenu, pos - 1, 1025)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub checkItem(pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.checkItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Call CheckMenuItem(Me.hMenu, pos - 1, 1032)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public Sub uncheckItem(pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.uncheckItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Call CheckMenuItem(Me.hMenu, pos - 1, 1024)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

	Public  Sub checkRadioItem(pos As Long)
		On Error Goto handler
		Const FuncName = {Sub "PopupMenu.checkRadioItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Call CheckMenuRadioItem(Me.hMenu, pos - 1, pos - 1, pos - 1, 1024)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End  sub
	
	Property Get Handle As Long
		Handle = Me.hMenu
	End Property
	
	Public Function show As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.show" }
		Dim errStr As String
		
		show = ""
		If Me.hMenu = 0 Then GoTo endh
		If Me.hWnd = 0 Then GoTo endh
		
		Dim menuS As String*128
		Dim l As Long
		Dim t As Long
		Dim i As Long
		Dim w As String
		Dim ret As Long
		Dim msgdata As MSG
				
		Call SetForegroundWindow(Me.hWnd)
		If Me.p.x < 0 Or Me.p.y < 0 Then Call GetCursorPos(Me.p)
		Call TrackPopupMenu(Me.hMenu, &H0, Me.p.x, Me.p.y, 0, me.hwnd, Me.r) ' &H0 = 256 + me.ani   me.hwnd = GetFocus

		ret = GetMessage(msgdata, me.hwnd, 0, 0)
		
		i = Abs(msgdata.message)
		If i <> 273 Then GoTo endh
		
		show = me.MenuArr(msgdata.wParam)
		 
		Call DestroyMenu (me.hMenu)

		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function
	
	Public Function showAsAction As String
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.showAsAction" }
		Dim errStr As String
		
		showAsAction = ""
		If Me.hMenu = 0 Then Goto endh
		If Me.hWnd = 0 Then Goto endh
		
		Dim menuS As String*128
		Dim l As Long
		Dim t As Long
		Dim i As Long
		Dim w As String
		Dim msgdata As MSG
				
		Call SetForegroundWindow(Me.hWnd)
		If Me.p.x < 0 Or Me.p.y < 0 Then Call GetCursorPos(Me.p)
		Call NEMDisableWaitCursor
		t = TrackPopupMenu(Me.hMenu, 256 + Me.anim, Me.r.x1, Me.r.y1, 0, Me.hWnd, Me.r)
		Call NEMEnableWaitCursor
		Me.selected = t
		l = GetMenuString(Me.hMenu, t, menuS, 0, 0) + 1
		Call GetMenuString(Me.hMenu, t, menuS, 1, 0)
		Call GetMessage(msgdata, Me.hWnd, 0, 0)
		
		For i = 1 To l - 1
			w = Mid(menuS, i, 1)
			showAsAction = showAsAction + w
		Next
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function
	
	Public Function hiliteItem(pos As Long) As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.hiliteItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		If Me.hWnd = 0 Then Goto endh
		
		Call HiliteMenuItem(Me.hWnd, Me.hMenu, pos - 1, 1152)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function
	
	Public Function unhiliteItem(pos As Long) As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.unhiliteItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		If Me.hWnd = 0 Then Goto endh
		
		Call HiliteMenuItem(Me.hWnd, Me.hMenu, pos - 1, 1024)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Public Function setDefaultItem(pos As Long) As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.setDefaultItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Call SetMenuDefaultItem(Me.hMenu, pos - 1, 1)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Public Function clearDefaultItem As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.clearDefaultItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Call SetMenuDefaultItem(Me.hMenu, - 1, 1)
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Public Function showAsRightAction As String
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.showAsRightAction" }
		Dim errStr As String
		
		showAsRightAction = ""
		If Me.hMenu = 0 Then Goto endh
		If Me.hWnd = 0 Then Goto endh
		
		Dim menuS As String*128
		Dim l As Long
		Dim t As Long
		Dim i As Long
		Dim w As String
		Dim msgdata As MSG
				
		Call SetForegroundWindow(Me.hWnd)
		If Me.p.x < 0 Or Me.p.y < 0 Then Call GetCursorPos(Me.p)
		Call NEMDisableWaitCursor
		t = TrackPopupMenu(Me.hMenu, 256 + Me.anim, Me.r.x2, Me.r.y2, 0, Me.hWnd, Me.r)
		Call NEMEnableWaitCursor
		Me.selected = t
		l = GetMenuString(Me.hMenu, t, menuS, 0, 0) + 1
		Call GetMenuString(Me.hMenu, t, menuS, 1, 0)
		Call GetMessage(msgdata, Me.hWnd, 0, 0)

		For i = 1 To l - 1
			w = Mid(menuS, i, 1)
			showAsRightAction = showAsRightAction + w
		Next
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Public Function getSelectedPosition As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.getSelectedPosition" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Dim arr() As Integer
		ReDim arr(0) As Integer
		
		Call Me.getSelectedPos(Me.hMenu, arr)
		getSelectedPosition = arr()
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Private Function getSelectedPos(hMenuLoc As Long, arr() As Integer) As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.getSelectedPos" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		getSelectedPos = False
		
		Dim i As Integer
		Dim hMenu1 As Long
		Dim ID As Long
		
		For i = 0 To GetMenuItemCount(hMenuLoc)
			ID = GetMenuItemID(hMenuLoc, i)
			If ID = -1 Then
				hMenu1 = GetSubMenu(hMenuLoc, i)
				If hMenu1 <> 0 Then
					arr(UBound(arr)) = i + 1
					ReDim Preserve arr(UBound(arr) + 1)
					arr(UBound(arr)) = 0
					If Me.getSelectedPos(hMenu1, arr) = True Then
						getSelectedPos = True
						Goto endh
					Else
						ReDim Preserve arr(UBound(arr) - 1)
						arr(UBound(arr)) = 0
					End If
				End If
			Else
				If ID = Me.selected Then
					arr(UBound(arr)) = i + 1
					getSelectedPos = True
					Goto endh
				End If
			End If
		Next
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Public Function getSelectedItems As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.getSelectedItems" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Dim arr() As String
		ReDim arr(0) As String
		
		Call Me.getSelectedItem(Me.hMenu, arr)
		getSelectedItems = arr()
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Private Function getSelectedItem(hMenuLoc As Long, arr() As String) As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.getSelectedItem" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		getSelectedItem = False
		
		Dim i As Integer
		Dim hMenu1 As Long
		Dim l As Long
		Dim t As String
		Dim ID As Long
		Dim menuS As String*128
		Dim txt As String
		Dim x As Long
		
		For i = 0 To GetMenuItemCount(hMenuLoc)
			ID = GetMenuItemID(hMenuLoc, i)
			If ID = -1 Then
				hMenu1 = GetSubMenu(hMenuLoc, i)
				If hMenu1 <> 0 Then
					l = GetMenuString(hMenuLoc, i, menuS, 0, 1024) + 1
					Call GetMenuString(hMenuLoc, i, menuS, l, 1024)
					txt = ""
					For x = 1 To l - 1
						t = Mid(menuS, x, 1)
						txt = txt + t
					Next
					ReDim Preserve arr(UBound(arr) + 1)
					arr(UBound(arr)) = txt
					If Me.getSelectedItem(hMenu1, Arr) = True Then
						getSelectedItem = True
						Goto endh
					Else
						ReDim Preserve arr(UBound(arr) - 1)
					End If
				End If
			Else
				If ID = Me.selected Then
					l = GetMenuString(hMenuLoc, i, menuS, 0, 1024) + 1
					Call GetMenuString(hMenuLoc, i, menuS, l, 1024)
					txt = ""
					For x = 1 To l - 1
						t = Mid(menuS, x, 1)
						txt = txt + t
					Next
					ReDim Preserve arr(UBound(arr) + 1)
					arr(UBound(arr)) = txt
					getSelectedItem = True
					Goto endh
				End If
			End If
		Next
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Function

	Property Get Animation As Variant
		If Me.anim = 0 Then Animation = True Else Animation = False
	End Property

	Property Set Animation As Variant
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.Animation" }
		Dim errStr As String
		
		If Me.hMenu = 0 Then Goto endh
		
		Dim v As Long
		Dim v1 As Long
		Dim v2 As Long
		v = GetVersion() And &H00FF
		v1 = (v And &HF0)/256
		v2 = v And &HF0
		If v1 = 0 And (v2 = 4 Or v2 = 3) Then
			Me.anim = 0
		Else
			If Animation = True Then Me.anim = 0 Else Me.anim = 16384
		End If
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Property

	Public Sub Delete
		On Error Goto handler
		Const FuncName = {Function "PopupMenu.Delete" }
		Dim errStr As String
		
		Call NEMDisableWaitCursor
		
		If Me.hMenu <> 0 Then DestroyMenu(Me.hMenu)
		Me.menuID = Me.menuID + 1
		
		Goto endh
handler:
		If GetLastError() <> "" Then
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & GetLastError()
		Else
			errStr = libName & FuncName & Err & ", line " & Erl & nLine & Error$
		End If
		Error Err, errStr
endh:
	End Sub

End Class
'++LotusScript Development Environment:2:2:Initialize:1:10
Sub Initialize
	nLine = Chr(10) & Chr(13)
End Sub












